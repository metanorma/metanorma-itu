---
http_interactions:
- request:
    method: get
    uri: https://raw.githubusercontent.com/relaton/relaton-data-iec/main/data/iec_60027_1953.yaml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - raw.githubusercontent.com
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '1630'
      Cache-Control:
      - max-age=300
      Content-Security-Policy:
      - default-src 'none'; style-src 'unsafe-inline'; sandbox
      Content-Type:
      - text/plain; charset=utf-8
      Etag:
      - W/"9fde580b0be5e8d600bf71cdacda363cbf984f7d22524e9f4a08dbab1bb434d7"
      Strict-Transport-Security:
      - max-age=31536000
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - deny
      X-Xss-Protection:
      - 1; mode=block
      X-Github-Request-Id:
      - D08A:0966:17E08B:1BD299:64314D2B
      Accept-Ranges:
      - bytes
      Date:
      - Sat, 08 Apr 2023 11:18:31 GMT
      Via:
      - 1.1 varnish
      X-Served-By:
      - cache-hkg17934-HKG
      X-Cache:
      - HIT
      X-Cache-Hits:
      - '1'
      X-Timer:
      - S1680952712.905101,VS0,VE1
      Vary:
      - Authorization,Accept-Encoding,Origin
      Access-Control-Allow-Origin:
      - "*"
      X-Fastly-Request-Id:
      - 8fc814ed83d07435c374510d21ac7297300c18e7
      Expires:
      - Sat, 08 Apr 2023 11:23:31 GMT
      Source-Age:
      - '92'
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        LS0tCnNjaGVtYS12ZXJzaW9uOiB2MS4yLjEKaWQ6IElFQzYwMDI3LTE5NTMKdGl0bGU6Ci0gY29udGVudDogSW50ZXJuYXRpb25hbCBsZXR0ZXIgc3ltYm9scyB1c2VkIGluIGNvbm5lY3Rpb24gd2l0aCBlbGVjdHJpY2l0eSAtIFF1YW50aXR5CiAgICBzeW1ib2xzIC0gQWxwaGFiZXRzIGFuZCBsZXR0ZXIgdHlwZQogIGxhbmd1YWdlOgogIC0gZW4KICBzY3JpcHQ6CiAgLSBMYXRuCiAgZm9ybWF0OiB0ZXh0L3BsYWluCiAgdHlwZTogbWFpbgotIGNvbnRlbnQ6IFN5bWJvbGVzIGxpdHTDqXJhdXggaW50ZXJuYXRpb25hdXggdXRpbGlzw6lzIGVuIMOpbGVjdHJpY2l0w6kgLSBTeW1ib2xlcyBkZQogICAgZ3JhbmRldXJzIC0gQWxwaGFiZXRzIGV0IGNhcmFjdMOocmVzCiAgbGFuZ3VhZ2U6CiAgLSBmcgogIHNjcmlwdDoKICAtIExhdG4KICBmb3JtYXQ6IHRleHQvcGxhaW4KICB0eXBlOiBtYWluCmxpbms6Ci0gY29udGVudDogaHR0cHM6Ly93ZWJzdG9yZS5pZWMuY2gvcHVibGljYXRpb24vMTIyNjIKICB0eXBlOiBzcmMKdHlwZTogc3RhbmRhcmQKZG9jaWQ6Ci0gaWQ6IElFQyA2MDAyNzoxOTUzCiAgdHlwZTogSUVDCiAgcHJpbWFyeTogdHJ1ZQotIGlkOiAndXJuOmllYzpzdGQ6aWVjOjYwMDI3OjE5NTMtMDE6OjonCiAgdHlwZTogVVJOCmRhdGU6Ci0gdHlwZTogcHVibGlzaGVkCiAgdmFsdWU6ICcxOTUzLTAxLTAxJwpjb250cmlidXRvcjoKLSBvcmdhbml6YXRpb246CiAgICBuYW1lOgogICAgLSBjb250ZW50OiBJbnRlcm5hdGlvbmFsIEVsZWN0cm90ZWNobmljYWwgQ29tbWlzc2lvbgogICAgYWJicmV2aWF0aW9uOgogICAgICBjb250ZW50OiBJRUMKICAgIHVybDogd3d3LmllYy5jaAogIHJvbGU6CiAgLSB0eXBlOiBwdWJsaXNoZXIKZWRpdGlvbjoKICBjb250ZW50OiAnMycKcmV2ZGF0ZTogJzE5NTMtMDEtMDEnCmxhbmd1YWdlOgotIGVuCi0gZnIKc2NyaXB0OgotIExhdG4KZG9jc3RhdHVzOgogIHN0YWdlOgogICAgdmFsdWU6IFJFVklTRUQKY29weXJpZ2h0OgotIG93bmVyOgogIC0gbmFtZToKICAgIC0gY29udGVudDogSW50ZXJuYXRpb25hbCBFbGVjdHJvdGVjaG5pY2FsIENvbW1pc3Npb24KICAgIGFiYnJldmlhdGlvbjoKICAgICAgY29udGVudDogSUVDCiAgICB1cmw6IHd3dy5pZWMuY2gKICBmcm9tOiAnMTk1MycKcmVsYXRpb246Ci0gdHlwZTogdXBkYXRlcwogIGJpYml0ZW06CiAgICBpZDogSUVDNjAwMjctMTk2NgogICAgdHlwZTogc3RhbmRhcmQKICAgIGRvY2lkOgogICAgLSBpZDogSUVDIDYwMDI3OjE5NjYKICAgICAgdHlwZTogSUVDCiAgICAgIHByaW1hcnk6IHRydWUKICAgIGZvcm1hdHRlZHJlZjoKICAgICAgY29udGVudDogSUVDIDYwMDI3OjE5NjYKICAgICAgZm9ybWF0OiB0ZXh0L3BsYWluCnBsYWNlOgotIEdlbmV2YQpkb2N0eXBlOiBpbnRlcm5hdGlvbmFsLXN0YW5kYXJkCmVkaXRvcmlhbGdyb3VwOgogIHRlY2huaWNhbF9jb21taXR0ZWU6CiAgLSBuYW1lOiBUQyAyNQogICAgbnVtYmVyOiAyNQogICAgdHlwZTogdGVjaG5pY2FsQ29tbWl0dGVlCnN0cnVjdHVyZWRpZGVudGlmaWVyOgogIHByb2plY3RfbnVtYmVyOiAnNjAwMjcnCiAgdHlwZTogSUVDCmV4dDoKICBzY2hlbWEtdmVyc2lvbjogdjEuMC4wCnByaWNlX2NvZGU6IGllYzpCCg==
  recorded_at: Sat, 08 Apr 2023 11:18:31 GMT
- request:
    method: post
    uri: https://www.itu.int/net4/ITU-T/search/GlobalSearch/Search
    body:
      encoding: UTF-8
      string: '{"json":"{\"Input\":\"ITU-T Z.100\",\"Start\":0,\"Rows\":10,\"SortBy\":\"RELEVANCE\",\"ExactPhrase\":false,\"CollectionName\":\"General\",\"CollectionGroup\":\"Recommendations\",\"Sector\":\"t\",\"Criterias\":[{\"Name\":\"Search
        in\",\"Criterias\":[{\"Selected\":false,\"Value\":\"\",\"Label\":\"Name\",\"Target\":\"\\\\/name_s\",\"TypeName\":\"CHECKBOX\",\"GetCriteriaType\":0},{\"Selected\":false,\"Value\":\"\",\"Label\":\"Short
        description\",\"Target\":\"\\\\/short_description_s\",\"TypeName\":\"CHECKBOX\",\"GetCriteriaType\":0},{\"Selected\":false,\"Value\":\"\",\"Label\":\"File
        content\",\"Target\":\"\\\\/file\",\"TypeName\":\"CHECKBOX\",\"GetCriteriaType\":0}],\"ShowCheckbox\":true,\"Selected\":false}],\"Topics\":\"\",\"ClientData\":{},\"Language\":\"en\",\"SearchType\":\"All\"}"}'
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML,
        like Gecko) Version/9.0.2 Safari/601.3.9
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - www.itu.int
      Content-Type:
      - application/json
      Content-Length:
      - '794'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Date:
      - Sat, 08 Apr 2023 11:18:31 GMT
      Set-Cookie:
      - BIGipServerV19edYz/rGMxUCJeS7ZH3w=!sSCwkno0gsNSgn7/dsa4jizK8gtM0KTW4EJiieBvqAl4x4XRua8fVsacZSyMBMEF3GhwxAV9beD9e6s=;
        path=/; Httponly; Secure
      - TS010592a8=018bf709fcc0cda77e6767a1428e5b3c2c173a9db2eb97d53c7467adeb311ebc7bc147f1addecd195f2d130f4ed254daf67c3a5b7f;
        Path=/
      - TS70351561027=08b49714d4ab200080a1e89062091ba10940b3530b2f9dd7d912ceb9e78c3b5a5cac3ea36153a3c308cc279c4e113000e3a70919ebdf41685945d40e447bd21b4813e65cc67edea09b80cd5f67901fc087f7b06c5f59ccd893634d91a749e2ee;
        Path=/
      Transfer-Encoding:
      - chunked
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Sat, 08 Apr 2023 11:18:32 GMT
- request:
    method: post
    uri: https://www.itu.int/net4/ITU-T/search/GlobalSearch/Search
    body:
      encoding: UTF-8
      string: '{"json":"{\"Input\":\"ITU-T Y.140\",\"Start\":0,\"Rows\":10,\"SortBy\":\"RELEVANCE\",\"ExactPhrase\":false,\"CollectionName\":\"General\",\"CollectionGroup\":\"Recommendations\",\"Sector\":\"t\",\"Criterias\":[{\"Name\":\"Search
        in\",\"Criterias\":[{\"Selected\":false,\"Value\":\"\",\"Label\":\"Name\",\"Target\":\"\\\\/name_s\",\"TypeName\":\"CHECKBOX\",\"GetCriteriaType\":0},{\"Selected\":false,\"Value\":\"\",\"Label\":\"Short
        description\",\"Target\":\"\\\\/short_description_s\",\"TypeName\":\"CHECKBOX\",\"GetCriteriaType\":0},{\"Selected\":false,\"Value\":\"\",\"Label\":\"File
        content\",\"Target\":\"\\\\/file\",\"TypeName\":\"CHECKBOX\",\"GetCriteriaType\":0}],\"ShowCheckbox\":true,\"Selected\":false}],\"Topics\":\"\",\"ClientData\":{},\"Language\":\"en\",\"SearchType\":\"All\"}"}'
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML,
        like Gecko) Version/9.0.2 Safari/601.3.9
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - www.itu.int
      Content-Type:
      - application/json
      Content-Length:
      - '794'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Date:
      - Sat, 08 Apr 2023 11:18:31 GMT
      Set-Cookie:
      - BIGipServerV19edYz/rGMxUCJeS7ZH3w=!xYHfWXt0qeaxH6P/dsa4jizK8gtM0I+INcvmaC+H56ZdumfAcGvF9QzK9X/9RFZw3obV8OQ6ecW0jW8=;
        path=/; Httponly; Secure
      - TS010592a8=018bf709fc5de31dd23f04aad62205fd4939975e961b06c2d1d0b8ccbd57738aebf71b638dfda7c18ec8967eba9d35bb9f077717dd;
        Path=/
      - TS70351561027=08b49714d4ab2000c856cd507b6493ffbb7d8c866b87790e0dc32023e9816f0c023337e5488738e7080bcbd8de113000640f3fc9984e2a815945d40e447bd21b04c2239e3c80b591bb11f1de378a03dea63a4af2e4e0bd43c5b262f6ab6cf1b7;
        Path=/
      Transfer-Encoding:
      - chunked
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Sat, 08 Apr 2023 11:18:32 GMT
- request:
    method: post
    uri: https://www.itu.int/net4/ITU-T/search/GlobalSearch/Search
    body:
      encoding: UTF-8
      string: '{"json":"{\"Input\":\"ITU-T Y.1001\",\"Start\":0,\"Rows\":10,\"SortBy\":\"RELEVANCE\",\"ExactPhrase\":false,\"CollectionName\":\"General\",\"CollectionGroup\":\"Recommendations\",\"Sector\":\"t\",\"Criterias\":[{\"Name\":\"Search
        in\",\"Criterias\":[{\"Selected\":false,\"Value\":\"\",\"Label\":\"Name\",\"Target\":\"\\\\/name_s\",\"TypeName\":\"CHECKBOX\",\"GetCriteriaType\":0},{\"Selected\":false,\"Value\":\"\",\"Label\":\"Short
        description\",\"Target\":\"\\\\/short_description_s\",\"TypeName\":\"CHECKBOX\",\"GetCriteriaType\":0},{\"Selected\":false,\"Value\":\"\",\"Label\":\"File
        content\",\"Target\":\"\\\\/file\",\"TypeName\":\"CHECKBOX\",\"GetCriteriaType\":0}],\"ShowCheckbox\":true,\"Selected\":false}],\"Topics\":\"\",\"ClientData\":{},\"Language\":\"en\",\"SearchType\":\"All\"}"}'
    headers:
      Accept-Encoding:
      - gzip,deflate,identity
      Accept:
      - "*/*"
      User-Agent:
      - Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_2) AppleWebKit/601.3.9 (KHTML,
        like Gecko) Version/9.0.2 Safari/601.3.9
      Accept-Charset:
      - ISO-8859-1,utf-8;q=0.7,*;q=0.7
      Accept-Language:
      - en-us,en;q=0.5
      Host:
      - www.itu.int
      Content-Type:
      - application/json
      Content-Length:
      - '795'
      Connection:
      - keep-alive
      Keep-Alive:
      - '300'
  response:
    status:
      code: 404
      message: Not Found
    headers:
      Date:
      - Sat, 08 Apr 2023 11:18:31 GMT
      Set-Cookie:
      - BIGipServerV19edYz/rGMxUCJeS7ZH3w=!0f/BdC8If0OQuAD/dsa4jizK8gtM0HMnyikFqsORG4++leX9Zm49BPfe2N0xVzbjUtSFD/xaZqinPmA=;
        path=/; Httponly; Secure
      - TS010592a8=018bf709fcb4a597c852ac634610fb327f1e282c39c060ed1be8cb3ea844e057514aabefcc55d5b26ed5626fbebc976aa85474b3d3;
        Path=/
      - TS70351561027=08b49714d4ab2000205a2b2a2673715980f34c6a1ff73720ae528780d7534069eef4e4d15bc1ef68089ba1629e113000cdb33e6fc715ba465945d40e447bd21bbad446a4c9a02f408c9b2bf2c20acb59c3b1c0f2010a6dce26d9fec02b9f6646;
        Path=/
      Transfer-Encoding:
      - chunked
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Sat, 08 Apr 2023 11:18:32 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO/IEC 27001","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.2.5), Ruby (3.2.0)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Sat, 08 Apr 2023 11:18:32 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 08 Apr 2023 11:18:32 GMT
- request:
    method: post
    uri: https://jcl49wv5ar-dsn.algolia.net/1/indexes/all_en/query
    body:
      encoding: UTF-8
      string: '{"query":"ISO 55000","hitsPerPage":100,"filters":"category:standard"}'
    headers:
      User-Agent:
      - Algolia for Ruby (2.2.5), Ruby (3.2.0)
      X-Algolia-Api-Key:
      - dd1b9e1ab383f4d4817d29cd5e96d3f0
      X-Algolia-Application-Id:
      - JCL49WV5AR
      Content-Type:
      - application/json; charset=utf-8
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      Connection:
      - keep-alive
      Keep-Alive:
      - '30'
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx
      Date:
      - Sat, 08 Apr 2023 11:18:32 GMT
      Content-Type:
      - application/json; charset=UTF-8
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      X-Alg-Pt:
      - '1'
      Accept-Encoding:
      - deflate, gzip
      Cache-Control:
      - no-store
      Access-Control-Allow-Origin:
      - "*"
      Timing-Allow-Origin:
      - "*"
      X-Content-Type-Options:
      - nosniff
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Disposition:
      - inline; filename=a.txt
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 08 Apr 2023 11:18:32 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/05/50/55088.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=34690B3BBFD19A8EF1E416947144E1F6; Path=/; Secure; HttpOnly
      Location:
      - "/standard/55088.html"
      Content-Length:
      - '0'
      Date:
      - Sat, 08 Apr 2023 11:18:33 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Sat, 08 Apr 2023 11:18:34 GMT
- request:
    method: get
    uri: https://www.iso.org/contents/data/standard/08/28/82875.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 301
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=713576842.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=7F45932E613CD94A49B9F097570E4EE1; Path=/; Secure; HttpOnly
      Location:
      - "/standard/82875.html"
      Content-Length:
      - '0'
      Date:
      - Sat, 08 Apr 2023 11:18:33 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: UTF-8
      string: ''
  recorded_at: Sat, 08 Apr 2023 11:18:34 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/82875.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=747131274.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=77B833FE7A8BF3E44A52895B49678C5E; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Sat, 08 Apr 2023 11:18:34 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 08 Apr 2023 11:18:34 GMT
- request:
    method: get
    uri: https://www.iso.org/standard/55088.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
      Host:
      - www.iso.org
  response:
    status:
      code: 200
      message: ''
    headers:
      Expires:
      - Wed, 09 May 1979 05:30:00 GMT
      Cache-Control:
      - no-cache, no-store, must-revalidate, proxy-revalidate, max-age=0
      Pragma:
      - no-cache
      Set-Cookie:
      - BIGipServerpool_prod_iso_www-jahia=730354058.36895.0000; path=/; Httponly;
        Secure
      - JSESSIONID=A75C33D2DC8E240D66099861ABEBF6E4; Path=/; Secure; HttpOnly
      Vary:
      - accept-encoding
      Content-Type:
      - text/html;charset=UTF-8
      Transfer-Encoding:
      - chunked
      Date:
      - Sat, 08 Apr 2023 11:18:34 GMT
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Sat, 08 Apr 2023 11:18:34 GMT
recorded_with: VCR 6.1.0
